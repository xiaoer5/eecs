{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"books/linux/","title":"Linux","text":""},{"location":"books/linux/#linux","title":"Linux \u5185\u6838","text":"<ul> <li>\u6253\u901aLinux\u64cd\u4f5c\u7cfb\u7edf\u548c\u82af\u7247\u5f00\u53d1</li> </ul>"},{"location":"linux/kdump/kdump_usage/","title":"Kdump Usage","text":""},{"location":"linux/kdump/kdump_usage/#1-kdump","title":"1. \u5b89\u88c5 <code>kdump</code> \u5de5\u5177","text":"<pre><code>sudo apt install -y linux-crashdump kexec-tools\n</code></pre>"},{"location":"linux/kdump/kdump_usage/#2-kdump","title":"2. \u6fc0\u6d3b <code>kdump</code>","text":"<pre><code>kdump-config load\n</code></pre> <p>\u67e5\u770b <code>kdump</code> \u72b6\u6001</p> <pre><code>kdump-config show\n</code></pre> <p>\u8fd9\u6837\uff0c \u5f53 Linux Kernel crash \u7684\u65f6\u5019\uff0c \u4f1a\u4ea7\u751f\u5982\u4e0b\u7684\u65e5\u5fd7\uff0c\u5e76\u4fdd\u5b58\u5230 <code>/var/crash</code> \u76ee\u5f55\u4e0b</p> <p>\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u89e6\u53d1\u4e00\u6b21\u6302\u6b7b\u6765\u67e5\u770b\u4ea7\u751f\u7684 kdump \u6587\u4ef6</p> <pre><code>echo c &gt; /proc/sysrq-trigger\n</code></pre>"},{"location":"linux/netlink/netlink_demo/","title":"Netlink Demo","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684Netlink\u793a\u4f8b\uff0c\u5305\u62ec\u7528\u6237\u7a7a\u95f4\u5e94\u7528\u7a0b\u5e8f\u548c\u5185\u6838\u6a21\u5757\u3002\u8be5\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7Netlink\u5b9e\u73b0\u5185\u6838\u4e0e\u7528\u6237\u7a7a\u95f4\u7684\u53cc\u5411\u901a\u4fe1\u3002</p>"},{"location":"linux/netlink/netlink_demo/#_1","title":"\u5185\u6838\u6a21\u5757\u4ee3\u7801","text":"<p>\u5185\u6838\u6a21\u5757\u8d1f\u8d23\u63a5\u6536\u7528\u6237\u7a7a\u95f4\u53d1\u9001\u7684\u6d88\u606f\uff0c\u5e76\u5411\u7528\u6237\u7a7a\u95f4\u56de\u590d\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u4ee3\u7801\uff1a<code>netlink_kernel.c</code></p> <pre><code>#include &lt;linux/module.h&gt;\n#include &lt;linux/netlink.h&gt;\n#include &lt;linux/skbuff.h&gt;\n#include &lt;net/sock.h&gt;\n#include &lt;linux/init.h&gt;\n#include &lt;linux/kernel.h&gt;\n\n#define NETLINK_USER 31\n\nstatic struct sock *nl_sk = NULL;\n\n// \u63a5\u6536\u7528\u6237\u7a7a\u95f4\u6d88\u606f\u7684\u56de\u8c03\u51fd\u6570\nstatic void netlink_recv_msg(struct sk_buff *skb) {\n    struct nlmsghdr *nlh;\n    struct sk_buff *skb_out;\n    char *reply_msg = \"Hello from kernel\";\n    int msg_size;\n    int res;\n    int pid;\n\n    // \u83b7\u53d6Netlink\u6d88\u606f\u5934\n    nlh = nlmsg_hdr(skb);\n    pid = nlh-&gt;nlmsg_pid; // \u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\u7684PID\n\n    // \u6253\u5370\u63a5\u6536\u5230\u7684\u6d88\u606f\n    pr_info(\"Received message from user space: %s\\n\", (char *)nlmsg_data(nlh));\n\n    // \u6784\u9020\u56de\u590d\u6d88\u606f\n    msg_size = strlen(reply_msg) + 1;\n    skb_out = nlmsg_new(msg_size, GFP_KERNEL);\n    if (!skb_out) {\n        pr_err(\"Failed to allocate skb_out\\n\");\n        return;\n    }\n\n    // \u586b\u5145Netlink\u6d88\u606f\u5934\n    nlh = nlmsg_put(skb_out, 0, 0, NLMSG_DONE, msg_size, 0);\n    if (!nlh) {\n        pr_err(\"Failed to create nlmsg\\n\");\n        kfree_skb(skb_out);\n        return;\n    }\n\n    // \u586b\u5145\u6d88\u606f\u4f53\n    memcpy(nlmsg_data(nlh), reply_msg, msg_size);\n\n    // \u53d1\u9001\u56de\u590d\u6d88\u606f\u5230\u7528\u6237\u7a7a\u95f4\n    res = nlmsg_unicast(nl_sk, skb_out, pid);\n    if (res &lt; 0) {\n        pr_err(\"Failed to send netlink message\\n\");\n    }\n}\n\n// \u521d\u59cb\u5316\u6a21\u5757\nstatic int __init netlink_init(void) {\n    struct netlink_kernel_cfg cfg = {\n        .input = netlink_recv_msg, // \u6ce8\u518c\u56de\u8c03\u51fd\u6570\n    };\n\n    // \u521b\u5efaNetlink\u5957\u63a5\u5b57\n    nl_sk = netlink_kernel_create(&amp;init_net, NETLINK_USER, &amp;cfg);\n    if (!nl_sk) {\n        pr_err(\"Failed to create netlink socket\\n\");\n        return -ENOMEM;\n    }\n\n    pr_info(\"Netlink kernel module loaded\\n\");\n    return 0;\n}\n\n// \u5378\u8f7d\u6a21\u5757\nstatic void __exit netlink_exit(void) {\n    if (nl_sk) {\n        netlink_kernel_release(nl_sk);\n    }\n    pr_info(\"Netlink kernel module unloaded\\n\");\n}\n\nmodule_init(netlink_init);\nmodule_exit(netlink_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Your Name\");\nMODULE_DESCRIPTION(\"Netlink Kernel Module Example\");\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_2","title":"\u7528\u6237\u7a7a\u95f4\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801","text":"<p>\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u8d1f\u8d23\u5411\u5185\u6838\u53d1\u9001\u6d88\u606f\uff0c\u5e76\u63a5\u6536\u5185\u6838\u7684\u56de\u590d\u3002</p> <p>\u4ee3\u7801\uff1a<code>netlink_user.c</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;linux/netlink.h&gt;\n\n#define NETLINK_USER 31\n#define MAX_PAYLOAD 1024\n\nint main() {\n    struct sockaddr_nl src_addr, dest_addr;\n    struct nlmsghdr *nlh = NULL;\n    struct iovec iov;\n    struct msghdr msg;\n    int sock_fd;\n    char *message = \"Hello from user space\";\n\n    // \u521b\u5efaNetlink\u5957\u63a5\u5b57\n    sock_fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_USER);\n    if (sock_fd &lt; 0) {\n        perror(\"socket\");\n        return -1;\n    }\n\n    // \u7ed1\u5b9a\u6e90\u5730\u5740\n    memset(&amp;src_addr, 0, sizeof(src_addr));\n    src_addr.nl_family = AF_NETLINK;\n    src_addr.nl_pid = getpid(); // \u4f7f\u7528\u8fdb\u7a0bID\u4f5c\u4e3a\u7aef\u53e3ID\n\n    if (bind(sock_fd, (struct sockaddr *)&amp;src_addr, sizeof(src_addr)) {\n        perror(\"bind\");\n        close(sock_fd);\n        return -1;\n    }\n\n    // \u8bbe\u7f6e\u76ee\u6807\u5730\u5740\n    memset(&amp;dest_addr, 0, sizeof(dest_addr));\n    dest_addr.nl_family = AF_NETLINK;\n    dest_addr.nl_pid = 0; // \u53d1\u9001\u5230\u5185\u6838\n    dest_addr.nl_groups = 0; // \u5355\u64ad\n\n    // \u6784\u9020Netlink\u6d88\u606f\n    nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD));\n    memset(nlh, 0, NLMSG_SPACE(MAX_PAYLOAD));\n    nlh-&gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);\n    nlh-&gt;nlmsg_pid = getpid();\n    nlh-&gt;nlmsg_flags = 0;\n\n    // \u586b\u5145\u6d88\u606f\u4f53\n    strcpy(NLMSG_DATA(nlh), message);\n\n    // \u8bbe\u7f6e\u6d88\u606f\u7ed3\u6784\n    iov.iov_base = (void *)nlh;\n    iov.iov_len = nlh-&gt;nlmsg_len;\n    msg.msg_name = (void *)&amp;dest_addr;\n    msg.msg_namelen = sizeof(dest_addr);\n    msg.msg_iov = &amp;iov;\n    msg.msg_iovlen = 1;\n\n    // \u53d1\u9001\u6d88\u606f\u5230\u5185\u6838\n    printf(\"Sending message to kernel: %s\\n\", message);\n    if (sendmsg(sock_fd, &amp;msg, 0) &lt; 0) {\n        perror(\"sendmsg\");\n        close(sock_fd);\n        free(nlh);\n        return -1;\n    }\n\n    // \u63a5\u6536\u5185\u6838\u7684\u56de\u590d\n    printf(\"Waiting for message from kernel...\\n\");\n    if (recvmsg(sock_fd, &amp;msg, 0) &lt; 0) {\n        perror(\"recvmsg\");\n        close(sock_fd);\n        free(nlh);\n        return -1;\n    }\n\n    // \u6253\u5370\u63a5\u6536\u5230\u7684\u6d88\u606f\n    printf(\"Received message from kernel: %s\\n\", (char *)NLMSG_DATA(nlh));\n\n    // \u6e05\u7406\n    close(sock_fd);\n    free(nlh);\n    return 0;\n}\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_3","title":"\u7f16\u8bd1\u548c\u8fd0\u884c","text":""},{"location":"linux/netlink/netlink_demo/#_4","title":"\u7f16\u8bd1\u5185\u6838\u6a21\u5757","text":"<p>\u5c06\u5185\u6838\u6a21\u5757\u4ee3\u7801\u4fdd\u5b58\u4e3anetlink_kernel.c</p> <p>\u7f16\u5199Makefile\uff1a</p> <pre><code>obj-m += netlink_kernel.o\nall:\n    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\nclean:\n    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n</code></pre> <p>\u7f16\u8bd1\u6a21\u5757\uff1a</p> <pre><code>make\n</code></pre> <p>\u52a0\u8f7d\u6a21\u5757\uff1a</p> <pre><code>sudo insmod netlink_kernel.ko\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_5","title":"\u7f16\u8bd1\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f","text":"<p>\u5c06\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u4ee3\u7801\u4fdd\u5b58\u4e3anetlink_user.c</p> <p>\u7f16\u8bd1\u7a0b\u5e8f\uff1a</p> <pre><code>gcc -o netlink_user netlink_user.c\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_6","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u8fd0\u884c\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\uff1a</p> <pre><code>./netlink_user\n</code></pre> <p>\u67e5\u770b\u5185\u6838\u65e5\u5fd7\uff1a</p> <pre><code>dmesg\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_7","title":"\u8fd0\u884c\u7ed3\u679c","text":"<p>\u7528\u6237\u7a7a\u95f4\u8f93\u51fa\uff1a</p> <pre><code>Sending message to kernel: Hello from user space\nWaiting for message from kernel...\nReceived message from kernel: Hello from kernel\n</code></pre> <p>\u5185\u6838\u65e5\u5fd7\uff1a</p> <pre><code>[  123.456789] Netlink kernel module loaded\n[  123.456790] Received message from user space: Hello from user space\n</code></pre>"},{"location":"linux/netlink/netlink_demo/#_8","title":"\u603b\u7ed3","text":"<p>\u5185\u6838\u6a21\u5757\u901a\u8fc7netlink_kernel_create()\u521b\u5efaNetlink\u5957\u63a5\u5b57\uff0c\u5e76\u6ce8\u518c\u56de\u8c03\u51fd\u6570\u5904\u7406\u7528\u6237\u7a7a\u95f4\u6d88\u606f\u3002</p> <p>\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u901a\u8fc7socket()\u521b\u5efaNetlink\u5957\u63a5\u5b57\uff0c\u5e76\u901a\u8fc7sendmsg()\u548crecvmsg()\u4e0e\u5185\u6838\u901a\u4fe1\u3002</p> <p>\u8be5\u793a\u4f8b\u5c55\u793a\u4e86Netlink\u7684\u53cc\u5411\u901a\u4fe1\u673a\u5236\uff0c\u9002\u7528\u4e8e\u5185\u6838\u4e0e\u7528\u6237\u7a7a\u95f4\u7684\u9ad8\u6548\u6570\u636e\u4ea4\u6362\u3002</p>"},{"location":"linux/tcp_ip/tcp_comm_demo/","title":"TCP Demo","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8eTCP\u7684Socket\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u793a\u4f8b\u7a0b\u5e8f\uff0c\u4f7f\u7528C\u8bed\u8a00\u7f16\u5199\u3002\u6b64\u7a0b\u5e8f\u5c55\u793a\u4e86\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u57fa\u672c\u7684TCP\u8fde\u63a5\uff0c\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5e76\u56de\u663e\u6570\u636e\u3002</p>"},{"location":"linux/tcp_ip/tcp_comm_demo/#1-serverserverc","title":"1. Server\u7aef\u4ee3\u7801\uff08server.c\uff09","text":""},{"location":"linux/tcp_ip/tcp_comm_demo/#11","title":"1.1 \u5355\u7ebf\u7a0b\u670d\u52a1\u5668\u4ee3\u7801","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 8080 // \u7aef\u53e3\u53f7\n#define BUFFER_SIZE 1024 // \u7f13\u51b2\u533a\u5927\u5c0f\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE] = {0};\n    const char *hello = \"Hello from server!\";\n\n    // \u521b\u5efa\u670d\u52a1\u5668Socket\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // \u7ed1\u5b9a\u670d\u52a1\u5668Socket\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u76d1\u542c\u8fde\u63a5\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u63a5\u53d7\u8fde\u63a5\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen)) &lt; 0) {\n        perror(\"accept failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u63a5\u6536\u6570\u636e\n    read(new_socket, buffer, BUFFER_SIZE);\n    printf(\"Received from client: %s\\n\", buffer);\n\n    // \u53d1\u9001\u6570\u636e\n    send(new_socket, hello, strlen(hello), 0);\n    printf(\"Sent reply to client: %s\\n\", hello);\n\n    // \u5173\u95edSocket\n    close(new_socket);\n    close(server_fd);\n\n    return 0;\n}\n</code></pre>"},{"location":"linux/tcp_ip/tcp_comm_demo/#12","title":"1.2 \u591a\u7ebf\u7a0b\u670d\u52a1\u5668\u7aef\u4ee3\u7801","text":"<p>\u5728\u670d\u52a1\u5668\u7aef\uff0c\u6bcf\u5f53\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6765\u5904\u7406\u8be5\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\uff0c\u4e3b\u7ebf\u7a0b\u5219\u7ee7\u7eed\u76d1\u542c\u65b0\u7684\u8fde\u63a5\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;pthread.h&gt;\n\n#define PORT 8080\n#define BUFFER_SIZE 1024\n\nvoid *handle_client(void *arg) {\n    int client_socket = *(int *)arg;\n    char buffer[BUFFER_SIZE] = {0};\n    const char *hello = \"Hello from server!\";\n\n    // \u63a5\u6536\u6570\u636e\n    read(client_socket, buffer, BUFFER_SIZE);\n    printf(\"Received from client: %s\\n\", buffer);\n\n    // \u53d1\u9001\u6570\u636e\n    send(client_socket, hello, strlen(hello), 0);\n    printf(\"Sent reply to client: %s\\n\", hello);\n\n    // \u5173\u95edSocket\n    close(client_socket);\n    free(arg);\n    pthread_exit(NULL);\n}\n\nint main() {\n    int server_fd, *new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    // \u521b\u5efa\u670d\u52a1\u5668Socket\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // \u7ed1\u5b9a\u670d\u52a1\u5668Socket\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u76d1\u542c\u8fde\u63a5\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Server is listening on port %d...\\n\", PORT);\n\n    while (1) {\n        new_socket = (int *)malloc(sizeof(int));\n        if ((*new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen)) &lt; 0) {\n            perror(\"accept failed\");\n            free(new_socket);\n            continue;\n        }\n\n        pthread_t client_thread;\n        if (pthread_create(&amp;client_thread, NULL, handle_client, (void *)new_socket) != 0) {\n            perror(\"pthread_create error\");\n            close(*new_socket);\n            free(new_socket);\n        } else {\n            pthread_detach(client_thread);\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n</code></pre>"},{"location":"linux/tcp_ip/tcp_comm_demo/#13","title":"1.3 \u591a\u8fdb\u7a0b\u670d\u52a1\u5668\u7aef\u4ee3\u7801","text":"<p>\u5728\u670d\u52a1\u5668\u7aef\uff0c\u6bcf\u5f53\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5904\u7406\u8be5\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\uff0c\u7236\u8fdb\u7a0b\u5219\u7ee7\u7eed\u76d1\u542c\u65b0\u7684\u8fde\u63a5\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 8080\n#define BUFFER_SIZE 1024\n\nvoid handle_client(int client_socket) {\n    char buffer[BUFFER_SIZE] = {0};\n    const char *hello = \"Hello from server!\";\n\n    // \u63a5\u6536\u6570\u636e\n    read(client_socket, buffer, BUFFER_SIZE);\n    printf(\"Received from client: %s\\n\", buffer);\n\n    // \u53d1\u9001\u6570\u636e\n    send(client_socket, hello, strlen(hello), 0);\n    printf(\"Sent reply to client: %s\\n\", hello);\n\n    // \u5173\u95edSocket\n    close(client_socket);\n    exit(0);\n}\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    // \u521b\u5efa\u670d\u52a1\u5668Socket\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // \u7ed1\u5b9a\u670d\u52a1\u5668Socket\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // \u76d1\u542c\u8fde\u63a5\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Server is listening on port %d...\\n\", PORT);\n\n    while (1) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen)) &lt; 0) {\n            perror(\"accept failed\");\n            continue;\n        }\n\n        if (fork() == 0) {\n            // \u5b50\u8fdb\u7a0b\u5904\u7406\u5ba2\u6237\u7aef\n            close(server_fd);\n            handle_client(new_socket);\n        } else {\n            // \u7236\u8fdb\u7a0b\u5173\u95ed\u5ba2\u6237\u7aefSocket\n            close(new_socket);\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n</code></pre> <p>\u8bf4\u660e \u591a\u7ebf\u7a0b\u65b9\u5f0f\uff1a - \u901a\u8fc7pthread_create\u521b\u5efa\u7ebf\u7a0b\u3002 - \u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u3002 - \u9002\u5408\u9700\u8981\u9ad8\u541e\u5410\u91cf\u548c\u4f4e\u5ef6\u8fdf\u7684\u573a\u666f\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002</p> <p>\u591a\u8fdb\u7a0b\u65b9\u5f0f\uff1a - \u901a\u8fc7fork\u521b\u5efa\u8fdb\u7a0b\u3002 - \u6bcf\u4e2a\u8fdb\u7a0b\u5904\u7406\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u3002 - \u9002\u5408\u4e0d\u9700\u8981\u5171\u4eab\u8d44\u6e90\u7684\u573a\u666f\uff0c\u8fdb\u7a0b\u95f4\u76f8\u5bf9\u72ec\u7acb\u3002</p> <p>\u9009\u62e9\u65b9\u6cd5\uff1a - \u5982\u679c\u9700\u8981\u5171\u4eab\u8d44\u6e90\uff0c\u5efa\u8bae\u4f7f\u7528\u591a\u7ebf\u7a0b\u3002 - \u5982\u679c\u4e0d\u9700\u8981\u5171\u4eab\u8d44\u6e90\uff0c\u591a\u8fdb\u7a0b\u53ef\u80fd\u66f4\u7b80\u5355\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a - \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u903b\u8f91\uff0c\u5982\u7ebf\u7a0b\u6c60\u6216\u8fdb\u7a0b\u6c60\uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u548c\u8d44\u6e90\u5229\u7528\u7387\u3002 - \u9700\u8981\u5904\u7406\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u3001\u5f02\u5e38\u7b49\u60c5\u51b5\u3002 - \u786e\u4fdd\u670d\u52a1\u5668\u80fd\u591f\u4f18\u96c5\u5730\u5173\u95ed\uff0c\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u3002</p>"},{"location":"linux/tcp_ip/tcp_comm_demo/#2-clientclientc","title":"2. Client\u7aef\u4ee3\u7801\uff08client.c\uff09","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 8080 // \u7aef\u53e3\u53f7\n#define BUFFER_SIZE 1024 // \u7f13\u51b2\u533a\u5927\u5c0f\n\nint main() {\n    struct sockaddr_in address;\n    int sock = 0;\n    char buffer[BUFFER_SIZE] = {0};\n    const char *hello = \"Hello from client!\";\n\n    // \u521b\u5efa\u5ba2\u6237\u7aefSocket\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {\n        printf(\"\\n Socket creation error \\n\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_port = htons(PORT);\n\n    // \u5c06IP\u5730\u5740\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5f62\u5f0f\n    if (inet_pton(AF_INET, \"127.0.0.1\", &amp;address.sin_addr) &lt;= 0) {\n        printf(\"\\n Invalid address/ Address not supported \\n\");\n        return -1;\n    }\n\n    // \u8fde\u63a5\u5230\u670d\u52a1\u5668\n    if (connect(sock, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        printf(\"\\n Connection Failed \\n\");\n        return -1;\n    }\n\n    // \u53d1\u9001\u6570\u636e\n    send(sock, hello, strlen(hello), 0);\n    printf(\"Sent to server: %s\\n\", hello);\n\n    // \u63a5\u6536\u6570\u636e\n    read(sock, buffer, BUFFER_SIZE);\n    printf(\"Received from server: %s\\n\", buffer);\n\n    // \u5173\u95edSocket\n    close(sock);\n\n    return 0;\n}\n</code></pre>"},{"location":"linux/tcp_ip/tcp_comm_demo/#3","title":"3. \u7f16\u8bd1\u548c\u8fd0\u884c","text":"<p>\u7f16\u8bd1\uff1a</p> <pre><code>gcc -o server server.c\ngcc -o client client.c\n</code></pre> <p>\u8fd0\u884c\uff1a \u9996\u5148\u8fd0\u884c\u670d\u52a1\u5668\u7aef\uff1a</p> <pre><code>./server\n</code></pre> <p>\u7136\u540e\u8fd0\u884c\u5ba2\u6237\u7aef\uff1a</p> <pre><code>./client\n</code></pre>"},{"location":"linux/tcp_ip/tcp_comm_demo/#4","title":"4. \u8f93\u51fa\u793a\u4f8b","text":"<p>\u670d\u52a1\u5668\u7aef\u8f93\u51fa\uff1a</p> <pre><code>Received from client: Hello from client!\nSent reply to client: Hello from server!\n</code></pre> <p>\u5ba2\u6237\u7aef\u8f93\u51fa\uff1a</p> <pre><code>Sent to server: Hello from client!\nReceived from server: Hello from server!\n</code></pre>"},{"location":"linux/tcp_ip/tcp_comm_demo/#5","title":"5. \u7a0b\u5e8f\u8bf4\u660e","text":"<p>Server\u7aef\uff1a \u521b\u5efa\u4e00\u4e2aSocket\u5e76\u7ed1\u5b9a\u5230\u6307\u5b9a\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u3002 \u76d1\u542c\u8fde\u63a5\u8bf7\u6c42\u3002 \u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\u3002 \u63a5\u6536\u5ba2\u6237\u7aef\u6570\u636e\u5e76\u56de\u663e\u3002</p> <p>Client\u7aef\uff1a \u521b\u5efa\u4e00\u4e2aSocket\u5e76\u8fde\u63a5\u5230\u670d\u52a1\u5668\u3002 \u53d1\u9001\u6570\u636e\u5230\u670d\u52a1\u5668\u3002 \u63a5\u6536\u670d\u52a1\u5668\u56de\u663e\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684TCP\u901a\u4fe1\u5b9e\u73b0\uff0c\u9002\u7528\u4e8e\u5b66\u4e60\u548c\u7406\u89e3Socket\u7f16\u7a0b\u7684\u57fa\u672c\u6982\u5ff5\u3002</p>"},{"location":"linux/tcp_ip/tcp_comm_demo/#6","title":"6. \u7591\u95ee\u89e3\u6790","text":""},{"location":"linux/tcp_ip/tcp_comm_demo/#61-linux-socketlistenclient","title":"6.1 linux socket\u7f16\u7a0b\u4e2dlisten\u662f\u5982\u4f55\u5b9e\u73b0\u63a5\u53d7\u591a\u4e2aclient\u7684\u8fde\u63a5\u7684","text":"<p>\u5728 Linux \u7684 Socket \u7f16\u7a0b\u4e2d\uff0clisten() \u51fd\u6570\u672c\u8eab\u5e76\u4e0d\u76f4\u63a5\u5904\u7406\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u800c\u662f\u901a\u8fc7 \u200b\u5185\u6838\u7ef4\u62a4\u7684\u7b49\u5f85\u961f\u5217\uff08backlog\uff09\u200b\u200b \u548c \u200b\u4e09\u6b21\u63e1\u624b\u72b6\u6001\u7ba1\u7406\u200b \u6765\u5b9e\u73b0\u540c\u65f6\u63a5\u53d7\u591a\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\u4ee5\u4e0b\u662f\u5176\u6838\u5fc3\u5b9e\u73b0\u673a\u5236\uff1a</p> <p>\u200b1. listen() \u7684\u4f5c\u7528 \u5f53\u8c03\u7528 listen() \u540e\uff0c\u5957\u63a5\u5b57\u4f1a\u8fdb\u5165 \u200b\u88ab\u52a8\u76d1\u542c\u6a21\u5f0f\uff0c\u5185\u6838\u4f1a\u4e3a\u8fd9\u4e2a\u5957\u63a5\u5b57\u7ef4\u62a4\u4e24\u4e2a\u961f\u5217\uff1a</p> <p>\u200b- \u672a\u5b8c\u6210\u8fde\u63a5\u961f\u5217\uff08SYN \u961f\u5217\uff09\u200b\uff1a\u4fdd\u5b58\u5df2\u6536\u5230\u5ba2\u6237\u7aef SYN \u5305\u4f46\u5c1a\u672a\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\u8bf7\u6c42\u3002 \u200b- \u5df2\u5b8c\u6210\u8fde\u63a5\u961f\u5217\uff08ACCEPT \u961f\u5217\uff09\u200b\uff1a\u4fdd\u5b58\u5df2\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3001\u7b49\u5f85\u5e94\u7528\u5c42\u8c03\u7528 accept() \u63d0\u53d6\u7684\u8fde\u63a5\u3002</p> <p>listen() \u7684 backlog \u53c2\u6570\u8868\u793a \u200b\u5df2\u5b8c\u6210\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\u200b\uff08\u4e0d\u540c\u5185\u6838\u7248\u672c\u5b9e\u73b0\u53ef\u80fd\u6709\u5dee\u5f02\uff09\u3002</p> <p>\u200b2. \u5185\u6838\u5982\u4f55\u5904\u7406\u591a\u4e2a\u8fde\u63a5 \u200b(1) \u4e09\u6b21\u63e1\u624b\u4e0e\u961f\u5217\u7ba1\u7406</p> <pre><code>1. \u200b\u5ba2\u6237\u7aef\u53d1\u9001 SYN\uff1a\n\n    - \u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\u65f6\u53d1\u9001 SYN \u5305\uff0c\u5185\u6838\u5c06\u5176\u52a0\u5165 \u200bSYN \u961f\u5217\u3002\n</code></pre> <p>\u200b     2. \u670d\u52a1\u5668\u56de\u590d SYN-ACK\uff1a</p> <pre><code>    - \u670d\u52a1\u5668\u5185\u6838\u56de\u590d SYN-ACK\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef ACK\u3002\n</code></pre> <p>\u200b     3. \u5ba2\u6237\u7aef\u53d1\u9001 ACK\uff1a</p> <pre><code>    - \u5f53\u5ba2\u6237\u7aef\u53d1\u9001 ACK \u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u540e\uff0c\u5185\u6838\u5c06\u6b64\u8fde\u63a5\u4ece \u200bSYN \u961f\u5217\u200b \u79fb\u5230 \u200bACCEPT \u961f\u5217\u3002\n</code></pre> <p>\u200b (2) accept() \u7684\u4f5c\u7528\u200b</p> <ul> <li>accept() \u4ece \u200bACCEPT \u961f\u5217\u200b \u4e2d\u53d6\u51fa\u4e00\u4e2a\u5df2\u5b8c\u6210\u7684\u8fde\u63a5\u3002</li> <li>\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0caccept() \u4f1a\u963b\u585e\uff08\u9ed8\u8ba4\u884c\u4e3a\uff09\u6216\u8fd4\u56de\u9519\u8bef\uff08\u975e\u963b\u585e\u6a21\u5f0f\uff09\u3002</li> </ul> <p>\u200b3. \u5e76\u53d1\u5904\u7406\u7684\u5173\u952e</p> <ul> <li> <p>\u200b\u5185\u6838\u81ea\u52a8\u5904\u7406\u4e09\u6b21\u63e1\u624b\uff1a</p> <p>listen() \u542f\u52a8\u76d1\u542c\u540e\uff0c\u5185\u6838\u4f1a\u81ea\u52a8\u5904\u7406\u6240\u6709\u4f20\u5165\u7684 SYN \u5305\uff0c\u5e94\u7528\u5c42\u65e0\u9700\u5e72\u9884\u63e1\u624b\u8fc7\u7a0b\u3002 \u200b - \u961f\u5217\u9694\u79bb\uff1a</p> <ul> <li>\u5373\u4f7f\u5e94\u7528\u5c42\u672a\u53ca\u65f6\u8c03\u7528 accept()\uff0c\u5df2\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u7684\u8fde\u63a5\u4ecd\u4f1a\u6682\u5b58\u5728 \u200bACCEPT \u961f\u5217\u200b \u4e2d\u3002</li> <li>\u53ea\u6709\u961f\u5217\u6ee1\u65f6\uff0c\u65b0\u7684\u8fde\u63a5\u624d\u4f1a\u88ab\u5185\u6838\u62d2\u7edd\u6216\u4e22\u5f03\u3002</li> </ul> </li> </ul> <p>4. \u4ee3\u7801\u793a\u4f8b</p> <pre><code>int sockfd = socket(AF_INET, SOCK_STREAM, 0);\nstruct sockaddr_in addr = { ... };\nbind(sockfd, (struct sockaddr*)&amp;addr, sizeof(addr));\n\n// \u8bbe\u7f6e backlog \u4e3a 128\nlisten(sockfd, 128);\n\nwhile (1) {\n    // \u4ece ACCEPT \u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u8fde\u63a5\n    int clientfd = accept(sockfd, NULL, NULL);\n    // \u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\uff08\u5982 fork() \u6216\u521b\u5efa\u7ebf\u7a0b\uff09\n}\n</code></pre> <p>5. \u53c2\u6570\u4e0e\u6027\u80fd\u8c03\u4f18</p> <ul> <li> <p>\u200bbacklog \u7684\u8bbe\u7f6e\uff1a</p> <ul> <li> <p>\u5982\u679c backlog \u8fc7\u5c0f\uff0c\u53ef\u80fd\u5bfc\u81f4 \u200bACCEPT \u961f\u5217\u200b \u6ee1\uff0c\u4e22\u5f03\u65b0\u8fde\u63a5\uff08\u5ba2\u6237\u7aef\u53ef\u80fd\u6536\u5230 ECONNREFUSED\uff09\u3002</p> </li> <li> <p>\u73b0\u4ee3 Linux \u5185\u6838\u4e2d\uff0cbacklog \u7684\u6700\u5927\u503c\u7531 /proc/sys/net/core/somaxconn \u63a7\u5236\uff08\u9ed8\u8ba4 4096\uff09\u3002 \u200b</p> </li> <li> <p>SYN \u961f\u5217\u957f\u5ea6\uff1a</p> </li> <li> <p>\u7531 /proc/sys/net/ipv4/tcp_max_syn_backlog \u63a7\u5236\u3002</p> </li> </ul> </li> </ul> <p>\u200b6. \u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u6a21\u578b</p> <ul> <li> <p>\u200b\u5355\u7ebf\u7a0b\u963b\u585e\u6a21\u578b\uff1a</p> <p>accept() \u9010\u4e2a\u5904\u7406\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u4f4e\u5e76\u53d1\u573a\u666f\u3002</p> </li> <li> <p>\u200b\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u6a21\u578b\uff1a</p> <p>\u5728 accept() \u8fd4\u56de\u540e\uff0c\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u521b\u5efa\u72ec\u7acb\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u5904\u7406\u8bf7\u6c42\uff08\u5982\u7ecf\u5178 fork() \u6a21\u578b\uff09\u3002</p> </li> <li> <p>\u200bI/O \u591a\u8def\u590d\u7528\uff1a</p> <p>\u4f7f\u7528 epoll/select/poll \u76d1\u542c\u591a\u4e2a\u8fde\u63a5\u4e8b\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u5e76\u53d1\uff08\u5982 Nginx\u3001Redis \u7684\u6a21\u578b\uff09\u3002</p> </li> </ul> <p>\u603b\u7ed3\uff1a\u200b listen() \u901a\u8fc7\u5185\u6838\u7ef4\u62a4\u7684\u961f\u5217\u673a\u5236\uff0c\u5141\u8bb8\u670d\u52a1\u5668\u5728\u672a\u8c03\u7528 accept() \u7684\u60c5\u51b5\u4e0b\u63a5\u53d7\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\u3002\u5b9e\u9645\u5e76\u53d1\u80fd\u529b\u53d6\u51b3\u4e8e\uff1a</p> <ul> <li>\u5185\u6838\u961f\u5217\u5927\u5c0f\uff08backlog \u548c\u7cfb\u7edf\u53c2\u6570\uff09\u3002</li> <li>\u5e94\u7528\u5c42\u5904\u7406\u8fde\u63a5\u7684\u6548\u7387\uff08\u5982\u591a\u7ebf\u7a0b\u6216 I/O \u591a\u8def\u590d\u7528\uff09\u3002</li> </ul>"},{"location":"notes/ai_basics/","title":"AI Basics","text":""},{"location":"notes/ai_basics/#machine-learning","title":"Machine Learning","text":""},{"location":"notes/ai_basics/#langage-model","title":"Langage Model","text":"<ul> <li>CS336: Language Modeling from Scratch</li> </ul>"},{"location":"notes/cpu_basics/","title":"CPU Basics","text":"<ul> <li> <p>YatCPU \u5b9e\u9a8c\u6587\u6863</p> </li> <li> <p>\u9999\u5c71\u5b98\u65b9\u6587\u6863</p> </li> <li> <p>Computation Structures (6.004) </p> </li> </ul>"},{"location":"notes/os_dev/","title":"OS Dev","text":"<ul> <li> <p>Writing an OS from scratch</p> <p>\u5176\u4e2d\u542b\u6709raspi4\u7684\u82af\u7247\u624b\u518c</p> </li> <li> <p>\u4e0a\u624b\u4e00\u4e2a\u5177\u4f53\u800c\u5fae\u7684 ARM \u64cd\u4f5c\u7cfb\u7edf</p> </li> <li> <p>Build a minimal multi-tasking OS kernel for ARM from scratch</p> </li> <li> <p>ARM64\u88f8\u673a\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u5b9e\u8df5</p> </li> <li> <p>Baking Pi \u2013 Operating Systems Development</p> </li> <li> <p>CS202-002 Operating Systems: Labs</p> </li> <li> <p>\u6210\u5927\u8cc7\u5de5 Wiki</p> </li> <li> <p>Linux \u7f51\u7edc\u534f\u8bae\u6808\u6536\u6d88\u606f\u8fc7\u7a0b-Ring Buffer</p> </li> </ul>"},{"location":"notes/others/","title":"Others","text":"<ul> <li>Network lab with QEMU</li> <li>Monitoring and Tuning the Linux Networking Stack: Sending Data</li> <li>Monitoring and Tuning the Linux Networking Stack: Receiving Data</li> <li>Linux\u5185\u6838\u5e38\u89c1\u7f51\u7edc\u4e22\u5305\u573a\u666f</li> <li> <p>IEEE 802.11be Multi-link Operation in ns-3</p> </li> <li> <p>\u4ece0\u5f00\u59cb\u4f7f\u7528QEMU\u6a21\u62dfARM\u5f00\u53d1\u73af\u5883\u7cfb\u5217\u4e00\u89c8\u8868</p> </li> <li> <p>\u6d45\u6790linux\u5185\u6838\u8c03\u8bd5\u6280\u672f\u4e4bprintk</p> </li> <li> <p>\u8f6f\u4ef6\u6d4b\u8bd5\u7684\u76f8\u5173\u672f\u8bed</p> </li> <li>\u8f6f\u4ef6\u7ba1\u7406\u9700\u6c42</li> <li> <p>\u4ec0\u4e48\u662fIPD\uff08\u96c6\u6210\u4ea7\u54c1\u5f00\u53d1\uff09</p> </li> <li> <p>https://chenweixiang.github.io/</p> </li> <li>Digital Pre-Distortion (DPD) Concept</li> <li>Linux \u9a71\u52a8\u6559\u7a0b - \u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684 \uff08\u4f2a\uff09Linux Wi-Fi \u65e0\u7ebf\u9a71\u52a8\u539f\u578b</li> <li> <p>Protected Management Frames in \u2013 WPA2 (802.11w)/WPA3/OWE</p> </li> <li> <p>wpa\u56db\u6b21\u63e1\u624b</p> </li> <li> <p>4-Way Hand Shake Keys Generation &amp; MIC Verification for WPA3/OWE/WPA2-PMF</p> </li> <li> <p>WPA3-SAE Mode</p> </li> <li> <p>Legacy Power Save Mode</p> </li> <li> <p>Generic Netlink\u5185\u6838\u5b9e\u73b0\u5206\u6790\uff08\u4e00\uff09\uff1a\u521d\u59cb\u5316_struct genl_info-CSDN\u535a\u5ba2</p> </li> <li> <p>Generic Netlink\u5185\u6838\u5b9e\u73b0\u5206\u6790\uff08\u4e8c\uff09\uff1a\u901a\u4fe1-CSDN\u535a\u5ba2</p> </li> <li> <p>Linux Kernel_luckyapple1028\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> </li> <li> <p>Netlink \u5185\u6838\u5b9e\u73b0\u5206\u6790\uff08\u4e00\uff09\uff1a\u521b\u5efa-CSDN\u535a\u5ba2</p> </li> <li> <p>Netlink \u5185\u6838\u5b9e\u73b0\u5206\u6790\uff08\u4e8c\uff09\uff1a\u901a\u4fe1-CSDN\u535a\u5ba2</p> </li> <li> <p>ARM Linux\u542f\u52a8\u6d41\u7a0b\u5206\u6790\u2014\u2014start_kernel\u524d\u542f\u52a8\u9636\u6bb5\uff08\u6c47\u7f16\u90e8\u5206\uff09_arm linux start-CSDN\u535a\u5ba2</p> </li> <li> <p>\u7ed3\u5408wireshark\u6293\u5230\u7684\u62a5\u6587\uff0c\u8bb2\u89e3wpa2-psk\u56db\u6b21\u63e1\u624b\u8fc7\u7a0b_wireshark \u6293\u53d6\u7684wifi\u8fde\u63a5\u8fc7\u7a0b\u7684\u62a5\u6587-CSDN\u535a\u5ba2</p> </li> <li> <p>Wi-Fi\u7a7a\u53e3\u5efa\u94fe\u901f\u7387\u7684\u8ba1\u7b97\u516c\u5f0f - WLAN \u7ef4\u62a4\u5b9d\u5178 - \u534e\u4e3a (huawei.com)</p> </li> <li> <p>Wi-Fi\u7814\u4e60\u8005 - \u77e5\u4e4e (zhihu.com)</p> </li> <li>WiFi | ShareTechnote</li> <li>802.11\u534f\u8bae\u7ec6\u8bfb - \u77e5\u4e4e (zhihu.com)</li> <li> <p>PySDR: A Guide to SDR and DSP using Python</p> </li> <li> <p>DSPIllustrations.com</p> </li> <li> <p>m\u57fa\u4e8eLS+\u53d8\u6b65\u957fLMS\u7684Volterra\u7ea7\u6570\u6570\u5b57\u9884\u5931\u771fDPD\u7cfb\u7edfmatlab\u4eff\u771f</p> </li> <li>Improved Variable Step-size LMS for Digital Predistortion in Wideband Power Amplifiers</li> <li> <p>Digital predistortion of power amplifiers using look-up table method with memory effects for LTE wireless systems | EURASIP Journal on Wireless Communications and Networking | Full Text (springeropen.com)</p> </li> <li> <p>Digital Pre-Distorter System Based on Memoryless Hammerstein Model for High Power Amplifier Impairments | Arabian Journal for Science and Engineering (springer.com)</p> </li> <li> <p>Digital_Pre-Distortion.pdf (chenweixiang.github.io)</p> </li> <li> <p>Digital Predistortion for RF Communications: From Equations to Implementation | Analog Devices</p> </li> <li> <p>DC offset and IQ Imbalance Correction \u00b7 Nuand/bladeRF Wiki \u00b7 GitHub</p> </li> <li> <p>\u9ad8\u901a\u5e73\u53f0\u6821\u51c6\u539f\u7406\u4ecb\u7ecd\u91cd\u70b9\u89e3\u6790.ppt (book118.com)</p> </li> <li> <p>Transmit LO Leakage (LOL)\u2014An Issue of Zero-IF That Isn\u2019t Making People Laugh Out Loud | Analog Devices</p> </li> <li> <p>LO Leakage in TX | RFIC Design (rfinsights.com)</p> </li> <li> <p>8.2.1.pdf (tudelft.nl)</p> </li> <li> <p>IQ Calibration | RFIC Design (rfinsights.com)</p> </li> </ul>"},{"location":"notes/rf_basics/","title":"RF Basics","text":"<ul> <li> <p>Introduction to I/Q signal</p> </li> <li> <p>How to solve ACLR issue</p> </li> </ul>"},{"location":"notes/rust_basics/","title":"Rust Basics","text":"<ul> <li>Tour of Rust</li> </ul>"},{"location":"notes/wifi_basics/","title":"Wifi Basics","text":"<ul> <li>vwifi</li> <li> <p>Linux Wi-Fi Driver Tutorial: How to Write a Simple Linux Wireless Driver Prototype</p> </li> <li> <p>Linux Wireless Networking: a short walk</p> </li> <li> <p>wireless: cl8k driver for Celeno IEEE 802.11ax devices</p> </li> </ul>"},{"location":"notes/wireless_comm/","title":"Wireless Comm","text":""},{"location":"notes/wireless_comm/#books","title":"Books","text":"<ul> <li> <p>Communication Systems Engineering with GNU Radio</p> </li> <li> <p>Wireless Communications from the Ground Up: An SDR Perspective</p> </li> </ul>"},{"location":"sw_dev/01_makefile/makefile_materials/","title":"MakeFile Materials","text":"<ul> <li>GNU Make</li> <li>Learn Makefiles With the tastiest examples</li> <li>Guide to makefiles</li> <li>Makefiles: A Practical Guide, Techniques, and Templates</li> <li>A Detailed Guide to Makefiles: Using Them for Scripting and Tooling</li> </ul>"},{"location":"tools/books_dl/","title":"Books Download","text":"<ul> <li>ZLibrary\u5165\u53e3</li> </ul>"},{"location":"tools/mkdocs/","title":"Mkdocs Usage","text":""},{"location":"tools/mkdocs/#install-mkdocs","title":"Install mkdocs","text":"<pre><code>pip install mkdocs\n\npip install mkdocs-material\n</code></pre>"},{"location":"tools/mkdocs/#create-mkdocs-project","title":"Create mkdocs project","text":"<pre><code>mkdocs new .\n</code></pre> <p>the structure of the new mkdocs project directory as follows</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"tools/mkdocs/#configure-mkdocs-theme","title":"Configure mkdocs theme","text":"<p>configure the mkdocs theme (theme: material)</p> <pre><code>site_name: My site\nsite_url: https://mydomain.org/mysite\ntheme:\n  name: material\n</code></pre>"},{"location":"tools/mkdocs/#add-mkdocs-navigation","title":"Add mkdocs navigation","text":"<pre><code>site_name: My Docs\nnav:\n  - Home: index.md\n  - Tools: tools.md\ntheme:\n  name: material\n</code></pre> <p>In <code>docs</code> directory to create <code>index.md</code> and <code>tools.md</code> markdown files</p> <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tools.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"tools/mkdocs/#deploy-mkdocs-project","title":"Deploy mkdocs project","text":"<p>The follow introduces how to deploy the mkdocs project to github page</p> <p>Fisrt, Upload the whole mkdocs project to github repository, such as <code>git@github.com:test/xxxx.git</code> And then\uff0c execute following command</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Now, you can access the website: <code>https://test.github.io/xxx</code></p>"},{"location":"tools/mkdocs/#plugins","title":"Plugins","text":"<ul> <li>mkdocs-markmap</li> </ul>"},{"location":"tools/mkslides/","title":"MkSlides Usage","text":""},{"location":"tools/mkslides/#mkslides","title":"MkSlides \u7b80\u4ecb","text":"<p>\u4f7f\u7528 <code>MkSlides</code> \u5de5\u5177\uff0c\u57fa\u4e8e Reveal.js \u5f3a\u5927\u529f\u80fd\uff0c\u8f7b\u677e\u5730\u5c06 markdown \u6587\u4ef6\u8f6c\u6362\u4e3a\u6f02\u4eae\u7684\u5e7b\u706f\u7247\u3002</p> <p><code>MkSlides</code> \u662f\u4e00\u4e2a\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\uff0c\u7528\u4e8e\u6784\u5efa\u5e7b\u706f\u7247\u3002</p> <p>\u5e7b\u706f\u7247\u6e90\u6587\u4ef6\u662f\u7528 Markdown \u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u5355\u4e2a YAML \u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u3002</p> <p>\u5de5\u4f5c\u6d41\u548c\u547d\u4ee4\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86 MkDocs \u548c reveal-md \u7684\u542f\u53d1\u3002</p>"},{"location":"tools/mkslides/#mkslides_1","title":"MkSlides \u5b89\u88c5","text":"<pre><code>pip install mkslides\n</code></pre>"},{"location":"tools/mkslides/#mkslides_2","title":"MkSlides \u9884\u89c8","text":"<pre><code>mkslides serve docs/\n</code></pre> <p>\u6216\u8005</p> <pre><code>mkslides serve test.md\n</code></pre>"},{"location":"tools/mkslides/#mkslides_3","title":"MkSlides \u521b\u5efa\u9759\u6001\u4e3a\u7f51\u9875","text":"<pre><code>mkslides build docs/\n</code></pre> <p>\u6216\u8005</p> <pre><code>mkslides build test.md\n</code></pre>"},{"location":"tools/mkslides/#_1","title":"\u53c2\u8003","text":"<ul> <li>MkSlides</li> <li>hogent-markdown-slides</li> </ul>"},{"location":"tools/msys2_hexo_install/","title":"Hexo install in MSYS2","text":""},{"location":"tools/msys2_hexo_install/#1-pacman","title":"1. \u66f4\u65b0 pacman \u5305\u5217\u8868","text":"<pre><code>pacman -Syu\n</code></pre>"},{"location":"tools/msys2_hexo_install/#2-nodejs","title":"2. \u5b89\u88c5Node.js","text":"<p>\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u67e5\u770bpacmac\u5305\u4e2d\u5305\u542b\u7684nodejs\u7684\u5b89\u88c5\u5305</p> <pre><code>pacman -Sl | grep nodejs\n</code></pre> <p>\u8f93\u51fa\u5982\u4e0b</p> <pre><code>$ pacman -Sl | grep nodejs\nclangarm64 mingw-w64-clang-aarch64-nodejs 23.5.0-3\nclangarm64 mingw-w64-clang-aarch64-nodejs-neovim 5.3.0-1\nclangarm64 mingw-w64-clang-aarch64-nodejs-webpack-cli 6.0.1-1\nclangarm64 mingw-w64-clang-aarch64-python-hatch-nodejs-version 0.3.2-2\nmingw32 mingw-w64-i686-python-hatch-nodejs-version 0.3.2-2\nmingw64 mingw-w64-x86_64-nodejs 23.5.0-3 [installed]\nmingw64 mingw-w64-x86_64-nodejs-webpack-cli 6.0.1-1\nmingw64 mingw-w64-x86_64-python-hatch-nodejs-version 0.3.2-2\nucrt64 mingw-w64-ucrt-x86_64-nodejs 23.5.0-3\nucrt64 mingw-w64-ucrt-x86_64-nodejs-neovim 5.3.0-1\nucrt64 mingw-w64-ucrt-x86_64-nodejs-webpack-cli 6.0.1-1\nucrt64 mingw-w64-ucrt-x86_64-python-hatch-nodejs-version 0.3.2-2\nclang64 mingw-w64-clang-x86_64-nodejs 23.5.0-3\nclang64 mingw-w64-clang-x86_64-nodejs-neovim 5.3.0-1\nclang64 mingw-w64-clang-x86_64-nodejs-webpack-cli 6.0.1-1\nclang64 mingw-w64-clang-x86_64-python-hatch-nodejs-version 0.3.2-2\n</code></pre> <p>\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5 <code>nodejs</code></p> <pre><code>pacman -S mingw-w64-x86_64-nodejs\n</code></pre>"},{"location":"tools/msys2_hexo_install/#3-nodenpm","title":"3. \u9a8c\u8bc1node\u548cnpm\u5b89\u88c5","text":"<pre><code>$ node -v\nv23.5.0\n\n$ npm -v\n10.9.2\n</code></pre>"},{"location":"tools/msys2_hexo_install/#4-hexo","title":"4. \u5b89\u88c5hexo","text":"<pre><code>npm install -g hexo-cli\n</code></pre>"},{"location":"wlan/ieee80211b/contents/","title":"802.11b","text":""},{"location":"wlan/ieee80211b/contents/#1-overview","title":"1. Overview","text":""},{"location":"wlan/ieee80211b/contents/#11-scope","title":"1.1 Scope","text":"<p>\u672c\u6807\u51c6\u65e8\u5728\u5236\u5b9a\u9002\u7528\u4e8e\u5c40\u57df\u7f51\u5185\u56fa\u5b9a\u3001\u4fbf\u643a\u548c\u79fb\u52a8\u8bbe\u5907\u65e0\u7ebf\u8fde\u63a5\u7684\u4ecb\u8d28\u8bbf\u95ee\u63a7\u5236\uff08MAC\uff09\u53ca\u7269\u7406\u5c42\uff08PHY\uff09\u89c4\u8303</p>"},{"location":"wlan/ieee80211b/contents/#12-purpose","title":"1.2 Purpose","text":"<p>\u672c\u6807\u51c6\u7684\u76ee\u7684\u662f\u4e3a\u9700\u8981\u5feb\u901f\u90e8\u7f72\u7684\u81ea\u52a8\u673a\u68b0\u3001\u8bbe\u5907\u6216\u7ad9\u63d0\u4f9b\u65e0\u7ebf\u8fde\u63a5\uff0c\u8fd9\u4e9b\u8bbe\u5907\u53ef\u80fd\u662f\u4fbf\u643a\u5f0f\u6216\u624b\u6301\u5f0f\uff0c\u6216\u8005\u5b89\u88c5\u5728\u5c40\u57df\u5185\u79fb\u52a8\u7684\u8f66\u8f86\u4e0a\u3002\u672c\u6807\u51c6\u8fd8\u4e3a\u76d1\u7ba1\u673a\u6784\u63d0\u4f9b\u4e86\u4e00\u79cd\u6807\u51c6\u5316\u8bbf\u95ee\u4e00\u4e2a\u6216\u591a\u4e2a\u9891\u7387\u9891\u6bb5\u7684\u65b9\u6cd5\uff0c\u4ee5\u5b9e\u73b0\u5c40\u57df\u901a\u4fe1\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u672c\u6807\u51c6\uff1a</p> <ul> <li> <p>\u63cf\u8ff0\u4e86 IEEE 802.11 \u517c\u5bb9\u8bbe\u5907\u5728\u81ea\u7ec4\u7f51\u7edc\uff08ad hoc\uff09\u548c\u57fa\u7840\u67b6\u6784\u7f51\u7edc\u4e2d\u8fd0\u884c\u6240\u9700\u7684\u529f\u80fd\u548c\u670d\u52a1\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u7f51\u7edc\u4e2d\u7ad9\u70b9\u79fb\u52a8\u6027\uff08\u8f6c\u6362\uff09\u7684\u76f8\u5173\u65b9\u9762\u3002</p> </li> <li> <p>\u5b9a\u4e49\u4e86\u652f\u6301\u5f02\u6b65 MAC \u670d\u52a1\u6570\u636e\u5355\u5143\uff08MSDU\uff09\u4f20\u8f93\u670d\u52a1\u7684 MAC \u7a0b\u5e8f\u3002</p> </li> <li> <p>\u5b9a\u4e49\u4e86\u7531 IEEE 802.11 MAC \u63a7\u5236\u7684\u591a\u79cd\u7269\u7406\u5c42\uff08PHY\uff09\u4fe1\u53f7\u6280\u672f\u548c\u63a5\u53e3\u529f\u80fd\u3002</p> </li> <li> <p>\u5141\u8bb8 IEEE 802.11 \u517c\u5bb9\u8bbe\u5907\u5728\u4e00\u4e2a\u53ef\u80fd\u4e0e\u591a\u4e2a\u91cd\u53e0\u7684 IEEE 802.11 \u65e0\u7ebf\u5c40\u57df\u7f51\u5171\u5b58\u7684\u65e0\u7ebf\u5c40\u57df\u7f51\uff08LAN\uff09\u4e2d\u8fd0\u884c\u3002</p> </li> <li> <p>\u63cf\u8ff0\u4e86\u5728\u65e0\u7ebf\u4ecb\u8d28\uff08WM\uff09\u4e0a\u4fdd\u62a4\u4f20\u8f93\u7684\u7528\u6237\u4fe1\u606f\u9690\u79c1\u4ee5\u53ca\u5bf9 IEEE 802.11 \u517c\u5bb9\u8bbe\u5907\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u8981\u6c42\u548c\u7a0b\u5e8f\u3002</p> </li> </ul>"},{"location":"wlan/ieee80211b/contents/#2-normative-references","title":"2. Normative references","text":""},{"location":"wlan/ieee80211b/contents/#3-definitions","title":"3. Definitions","text":""},{"location":"wlan/ieee80211b/contents/#4-abbreviations-and-acronyms","title":"4. Abbreviations and acronyms","text":""},{"location":"wlan/ieee80211b/contents/#5-general-description","title":"5. General description","text":""},{"location":"wlan/ieee80211b/contents/#51-general-description-of-the-architecture","title":"5.1 General description of the architecture","text":""},{"location":"wlan/ieee80211b/contents/#511-how-wireless-lan-systems-are-different","title":"5.1.1 How wireless LAN systems are different","text":""},{"location":"wlan/ieee80211b/contents/#52-components-of-the-ieee-80211-architecture","title":"5.2 Components of the IEEE 802.11 architecture","text":""},{"location":"wlan/ieee80211b/contents/#521-the-independent-bss-as-an-ad-hoc-network","title":"5.2.1 The independent BSS as an ad hoc network","text":""},{"location":"wlan/ieee80211b/contents/#522-distribution-system-concepts","title":"5.2.2 Distribution system concepts","text":""},{"location":"wlan/ieee80211b/contents/#523-area-concepts","title":"5.2.3 Area concepts","text":""},{"location":"wlan/ieee80211b/contents/#524-integration-with-wired-lans","title":"5.2.4 Integration with wired LANs","text":""},{"location":"wlan/ieee80211b/contents/#6-mac-service-definition","title":"6. MAC service definition","text":""},{"location":"wlan/ieee80211b/contents/#7-frame-formats","title":"7. Frame formats","text":""},{"location":"wlan/ieee80211b/contents/#71-mac-frame-formats","title":"7.1 MAC frame formats","text":""},{"location":"wlan/ieee80211b/contents/#72-format-of-individual-frame-types","title":"7.2 Format of individual frame types","text":""},{"location":"wlan/ieee80211b/contents/#73-management-frame-body-components","title":"7.3 Management frame body components","text":""},{"location":"wlan/ieee80211b/contents/#8-authentication-and-privacy","title":"8. Authentication and privacy","text":""},{"location":"wlan/ieee80211b/contents/#9-mac-sublayer-functional-description","title":"9. MAC sublayer functional description","text":""},{"location":"wlan/ieee80211b/contents/#10-layer-management","title":"10. Layer management","text":""},{"location":"wlan/ieee80211b/contents/#11-mac-sublayer-management-entity","title":"11. MAC sublayer management entity","text":""},{"location":"wlan/ieee80211b/contents/#12-physical-layerphy-service-specification","title":"12. Physical layer(PHY) service specification","text":""},{"location":"wlan/ieee80211b/contents/#13-phy-management","title":"13. PHY management","text":""},{"location":"wlan/ieee80211b/contents/#14-frequency-hopping-spread-spectrumfhss-phy-specification-for-the-24-ghz-industrial-scientific-and-medicalism-band","title":"14. Frequency-Hopping spread spectrum(FHSS) PHY specification for the 2.4 GHz Industrial, Scientific, and Medical(ISM) band","text":""},{"location":"wlan/ieee80211b/contents/#15-direct-sequence-spread-spectrumdsss-phy-specification-for-24-ghz-band-designated-for-ism-applications","title":"15. Direct sequence spread spectrum(DSSS) PHY specification for 2.4 GHz band designated for ISM applications","text":""},{"location":"wlan/ieee80211b/contents/#16-infraredir-phy-specification","title":"16. Infrared(IR) PHY specification","text":""}]}